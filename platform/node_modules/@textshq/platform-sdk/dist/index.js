"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.textsRenderer = exports.texts = void 0;
__exportStar(require("./enums"), exports);
__exportStar(require("./errors"), exports);
__exportStar(require("./constants"), exports);
__exportStar(require("./fetch"), exports);
__exportStar(require("./generic"), exports);
__exportStar(require("./CustomEmoji"), exports);
__exportStar(require("./Message"), exports);
__exportStar(require("./Attachment"), exports);
__exportStar(require("./Notifications"), exports);
__exportStar(require("./PhoneNumber"), exports);
__exportStar(require("./Platform"), exports);
__exportStar(require("./PlatformAPI"), exports);
__exportStar(require("./PlatformInfo"), exports);
__exportStar(require("./ServerEvent"), exports);
__exportStar(require("./TextAttributes"), exports);
__exportStar(require("./Thread"), exports);
__exportStar(require("./ThreadFolderName"), exports);
__exportStar(require("./User"), exports);
__exportStar(require("./StickerPack"), exports);
__exportStar(require("./IAsyncSqlite"), exports);
__exportStar(require("./util"), exports);
// Ensure the globalThis texts is of correct type
exports.texts = globalThis.texts;
exports.textsRenderer = globalThis.texts;
// // Wrap the original createHttpClient method
// const originalCreateHttpClient = texts.createHttpClient.bind(texts)
// // Define a new createHttpClient method with proxy support
// texts.createHttpClient = (options: any & { proxy?: ProxyConfig }) => {
//   // Check if proxy options are provided
//   if (options.proxy) {
//     const { protocol, host, port, auth } = options.proxy
//     const proxyUrl = `${protocol}://${auth ? `${auth.username}:${auth.password}@` : ''}${host}:${port}`
//     // Set the appropriate agent based on the protocol
//     if (protocol === 'socks4' || protocol === 'socks5') {
//       options.agent = new SocksProxyAgent(proxyUrl)
//     } else {
//       options.agent = new HttpsProxyAgent(proxyUrl)
//     }
//   }
//   // Call the original createHttpClient with the updated options
// //   return originalCreateHttpClient(options)
// }
