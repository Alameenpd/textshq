"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const worker_threads_1 = require("worker_threads");
const DEBUG = !!process.env.DEBUG;
const callParent = worker_threads_1.parentPort
    ? (message) => { worker_threads_1.parentPort.postMessage(message); }
    : (message) => { process.send(message); };
process.on('uncaughtException', err => {
    console.error('[Container Unhandled Exception]', err);
});
process.on('unhandledRejection', err => {
    console.error('[Container Unhandled Promise Rejection]', err);
});
function registerWorkerHandlers(accountID, PAPI) {
    const papi = new PAPI(accountID);
    const onMessageHandler = async (msg) => {
        if (msg === 'cleanup' || msg === 'powermonitor-on-resume')
            return;
        if (DEBUG)
            console.log('message from parent:', msg);
        switch (msg.type) {
            case 2 /* MessageType.CallMethod */: {
                const { reqID, methodName, args, isCallback } = msg;
                try {
                    const method = papi[methodName];
                    const result = await (isCallback
                        ? method?.((...cbArgs) => {
                            callParent({
                                type: 1 /* MessageType.Callback */,
                                methodName,
                                args: cbArgs,
                            });
                        })
                        : method?.(...args));
                    callParent({
                        type: 0 /* MessageType.MethodResult */,
                        reqID,
                        result,
                    });
                }
                catch (err) {
                    console.error('container-entry error', { methodName, args }, err);
                    callParent({
                        type: 0 /* MessageType.MethodResult */,
                        reqID,
                        error: { name: err.name, message: err.message },
                    });
                }
                return;
            }
            default:
                console.log(msg);
                throw Error('unknown message');
        }
    };
    (worker_threads_1.parentPort ?? process).on('message', onMessageHandler);
}
exports.default = registerWorkerHandlers;
