/// <reference types="node" />
import WebSocket from 'ws';
import { Awaitable } from '.';
export type WebSocketClientOptions = WebSocket.ClientOptions;
export default class PersistentWS {
    private readonly getConnectionInfo;
    private readonly onMessage;
    private readonly onOpen?;
    private readonly onClose?;
    private readonly onError?;
    private ws;
    private disposing;
    private retryAttempt;
    private connectTimeout;
    private lastOpen;
    constructor(getConnectionInfo: () => Awaitable<{
        endpoint: string;
        options?: WebSocket.ClientOptions;
    }>, onMessage: (msg: Buffer) => void, onOpen?: (() => void) | undefined, onClose?: ((code?: number) => {
        retry: boolean;
    } | void) | undefined, onError?: ((error: Error) => {
        retry: boolean;
    } | void) | undefined);
    readonly connect: () => Promise<void>;
    /**
     * Note: this isn't always accurate, the internet could be down/turned off and this may still return true
     * */
    get connected(): boolean | undefined;
    private readonly waitAndSend;
    readonly send: (data: any) => Promise<void> | undefined;
    /**
      * Initiate a closing handshake. Upon completion, {@linkcode onClose} is
      * called and its return value is consulted to determine reconnection
      * behavior (defaulting to a reconnect).
      *
      * **IMPORTANT**: If sending the server a close frame takes too long for
      * whatever reason (such as if the network is down), a close will occur after
      * 30 seconds (the timeout for a close handshake) with a code of `1006`,
      * regardless of any code passed into this method.
      */
    disconnect(code?: number): void;
    /**
      * Forcibly close the underlying WebSocket connection. This immediately
      * dispatches {@linkcode onClose} with a code of `1006`, and the return value
      * is consulted to determine reconnection behavior (defaulting to a reconnect).
      *
      * If the WebSocket is in the middle of connecting, {@linkcode onError} is
      * also called.
      */
    forceDisconnect(): void;
    /**
      * Initiate a closing handshake _without_ calling {@linkcode onClose} upon
      * completion. This prevents automatic reconnection from occurring. To
      * initiate another connection after using this method, call {@linkcode connect}.
      *
      * Please see the note described in the documentation for {@linkcode disconnect}.
      */
    dispose(code?: number): void;
}
