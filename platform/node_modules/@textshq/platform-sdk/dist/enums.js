"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppState = exports.PlayStatus = exports.MessageBehavior = exports.ActivityType = exports.ConnectionStatus = exports.MessageAttachmentType = exports.AttachmentType = exports.MessageDeletionMode = exports.CodeRequiredReason = exports.ServerEventType = exports.MessageActionType = exports.Attribute = exports.InboxName = void 0;
var InboxName;
(function (InboxName) {
    InboxName["NORMAL"] = "normal";
    InboxName["REQUESTS"] = "requests";
})(InboxName = exports.InboxName || (exports.InboxName = {}));
var Attribute;
(function (Attribute) {
    /** Platform users can have an email address */
    Attribute["CAN_MESSAGE_EMAIL"] = "can_message_email";
    /** Platform users can have a phone number */
    Attribute["CAN_MESSAGE_PHONE_NUMBER"] = "can_message_phone_number";
    /** Platform users can have a username */
    Attribute["CAN_MESSAGE_USERNAME"] = "can_message_username";
    Attribute["CANNOT_MESSAGE_SELF"] = "cannot_message_self";
    /** Don't cache messages, threads, users for the platform */
    Attribute["NO_CACHE"] = "no_cache";
    /** Platform defines Message.cursor. If it's missing for any message, error checker plugin will complain. */
    Attribute["DEFINES_MESSAGE_CURSOR"] = "defines_message_cursor";
    /** When it's a group thread and user does an @-mention, search all users in the autocomplete */
    Attribute["SEARCH_ALL_USERS_FOR_GROUP_MENTIONS"] = "search_all_users_for_group_mentions";
    /** Platform doesn't allow creation of duplicate groups with the same set of users (Alice, Bob) */
    Attribute["NO_SUPPORT_DUPLICATE_GROUP_CREATION"] = "no_support_duplicate_group_creation";
    /** Platform integration doesn't support adding participants to groups */
    Attribute["NO_SUPPORT_GROUP_ADD_PARTICIPANT"] = "no_support_group_add_participant";
    /** Platform integration doesn't support removing participants from groups */
    Attribute["NO_SUPPORT_GROUP_REMOVE_PARTICIPANT"] = "no_support_group_remove_participant";
    /** Platform integration doesn't support creating group threads */
    Attribute["NO_SUPPORT_GROUP_THREAD_CREATION"] = "no_support_group_thread_creation";
    /** Platform integration doesn't support changing group titles */
    Attribute["NO_SUPPORT_GROUP_TITLE_CHANGE"] = "no_support_group_title_change";
    /** Platform integration doesn't support creating single threads */
    Attribute["NO_SUPPORT_SINGLE_THREAD_CREATION"] = "no_support_single_thread_creation";
    /** Platform integration doesn't support sending typing indicator */
    Attribute["NO_SUPPORT_TYPING_INDICATOR"] = "no_support_typing_indicator";
    /** Creating a group thread requires the messageText arg to be present in PlatformAPI.createThread */
    Attribute["GROUP_THREAD_CREATION_REQUIRES_MESSAGE"] = "group_thread_creation_requires_message";
    /** Creating a single thread requires the messageText arg to be present in PlatformAPI.createThread */
    Attribute["SINGLE_THREAD_CREATION_REQUIRES_MESSAGE"] = "single_thread_creation_requires_message";
    /** Creating a group thread requires the title arg to be present in PlatformAPI.createThread */
    Attribute["GROUP_THREAD_CREATION_REQUIRES_TITLE"] = "group_thread_creation_requires_title";
    Attribute["SHARES_CONTACTS"] = "shares_contacts";
    /** Sort messages by timestamp or custom key on receiving them */
    Attribute["SORT_MESSAGES_ON_PUSH"] = "sort_messages_on_push";
    Attribute["SUBSCRIBE_TO_CONN_STATE_CHANGE"] = "subscribe_to_conn_state_change";
    Attribute["SUBSCRIBE_TO_THREAD_SELECTION"] = "subscribe_to_thread_selection";
    /** Send ONLINE/OFFLINE activity via sendActivityIndicator */
    Attribute["SUBSCRIBE_TO_ONLINE_OFFLINE_ACTIVITY"] = "subscribe_to_online_offline_activity";
    Attribute["SUPPORTS_ARCHIVE"] = "supports_archive";
    /** Platform supports reacting with custom emojis and sending custom emojis in Message.text
     *  and platform integration implements PlatformAPI.getCustomEmojis */
    Attribute["SUPPORTS_CUSTOM_EMOJIS"] = "supports_custom_emojis";
    Attribute["SUPPORTS_DELETE_THREAD"] = "supports_delete_thread";
    Attribute["SUPPORTS_REPORT_THREAD"] = "supports_report_thread";
    /** Platform integration implements PlatformAPI.editMessage */
    Attribute["SUPPORTS_EDIT_MESSAGE"] = "supports_edit_message";
    Attribute["SUPPORTS_FORWARD"] = "supports_forward";
    Attribute["SUPPORTS_GROUP_IMAGE_CHANGE"] = "supports_group_image_change";
    Attribute["SUPPORTS_GROUP_PARTICIPANT_ROLE_CHANGE"] = "supports_group_participant_role_change";
    Attribute["SUPPORTS_MARK_AS_UNREAD"] = "supports_mark_as_unread";
    Attribute["SUPPORTS_PIN_THREAD"] = "supports_pin_thread";
    Attribute["SUPPORTS_PRESENCE"] = "supports_presence";
    Attribute["SUPPORTS_QUOTED_MESSAGES"] = "supports_quoted_messages";
    Attribute["SUPPORTS_QUOTED_MESSAGES_FROM_ANY_THREAD"] = "supports_quoted_messages_from_any_thread";
    Attribute["SUPPORTS_REQUESTS_INBOX"] = "supports_requests_inbox";
    Attribute["SUPPORTS_MOVING_THREAD_TO_INBOX"] = "supports_moving_thread_to_inbox";
    Attribute["SUPPORTS_SEARCH"] = "supports_search";
    Attribute["SUPPORTS_STOP_TYPING_INDICATOR"] = "supports_stop_typing_indicator";
    Attribute["SUPPORTS_PUSH_NOTIFICATIONS"] = "supports_push_notifications";
    Attribute["SUPPORTS_MESSAGE_EXPIRY"] = "supports_message_expiry";
    /** Platform integration implements editMessage() and has no rate limit for message edits */
    Attribute["SUPPORTS_LIVE_TYPING"] = "supports_live_typing";
    /** PlatformAPI.getMessages supports `direction=after` */
    Attribute["GET_MESSAGES_SUPPORTS_AFTER_DIRECTION"] = "get_messages_supports_after_direction";
    Attribute["CAN_FETCH_LINK_PREVIEW"] = "can_fetch_link_preview";
    Attribute["CAN_REMOVE_LINK_PREVIEW"] = "can_remove_link_preview";
})(Attribute = exports.Attribute || (exports.Attribute = {}));
var MessageActionType;
(function (MessageActionType) {
    MessageActionType["GROUP_THREAD_CREATED"] = "group_thread_created";
    MessageActionType["THREAD_IMG_CHANGED"] = "thread_img_changed";
    MessageActionType["THREAD_TITLE_UPDATED"] = "thread_title_updated";
    MessageActionType["THREAD_PARTICIPANTS_ADDED"] = "thread_participants_added";
    MessageActionType["THREAD_PARTICIPANTS_REMOVED"] = "thread_participants_removed";
    MessageActionType["MESSAGE_REQUEST_ACCEPTED"] = "message_request_accepted";
    MessageActionType["MESSAGE_REACTION_CREATED"] = "message_reaction_created";
    MessageActionType["MESSAGE_REACTION_DELETED"] = "message_reaction_deleted";
})(MessageActionType = exports.MessageActionType || (exports.MessageActionType = {}));
var ServerEventType;
(function (ServerEventType) {
    ServerEventType["STATE_SYNC"] = "state_sync";
    ServerEventType["TOAST"] = "toast";
    ServerEventType["THREAD_MESSAGES_REFRESH"] = "thread_messages_refresh";
    ServerEventType["USER_ACTIVITY"] = "user_activity";
    ServerEventType["USER_PRESENCE_UPDATED"] = "user_presence_updated";
    ServerEventType["SESSION_UPDATED"] = "session_updated";
    ServerEventType["REFRESH_ACCOUNT"] = "refresh_account";
})(ServerEventType = exports.ServerEventType || (exports.ServerEventType = {}));
var CodeRequiredReason;
(function (CodeRequiredReason) {
    CodeRequiredReason["TWO_FACTOR"] = "two_factor";
    CodeRequiredReason["CHECKPOINT"] = "checkpoint";
})(CodeRequiredReason = exports.CodeRequiredReason || (exports.CodeRequiredReason = {}));
var MessageDeletionMode;
(function (MessageDeletionMode) {
    MessageDeletionMode["DELETE_FOR_SELF"] = "delete_for_self";
    MessageDeletionMode["DELETE_FOR_EVERYONE"] = "delete_for_everyone";
    MessageDeletionMode["UNSEND"] = "unsend";
    MessageDeletionMode["UNSUPPORTED"] = "unsupported";
    MessageDeletionMode["NONE"] = "none";
})(MessageDeletionMode = exports.MessageDeletionMode || (exports.MessageDeletionMode = {}));
var AttachmentType;
(function (AttachmentType) {
    AttachmentType["UNKNOWN"] = "unknown";
    AttachmentType["IMG"] = "img";
    AttachmentType["VIDEO"] = "video";
    AttachmentType["AUDIO"] = "audio";
})(AttachmentType = exports.AttachmentType || (exports.AttachmentType = {}));
/** @deprecated renamed to AttachmentType */
exports.MessageAttachmentType = AttachmentType;
var ConnectionStatus;
(function (ConnectionStatus) {
    ConnectionStatus["UNKNOWN"] = "unknown";
    ConnectionStatus["CONNECTED"] = "connected";
    ConnectionStatus["CONNECTING"] = "connecting";
    ConnectionStatus["CONFLICT"] = "conflict";
    ConnectionStatus["UNAUTHORIZED"] = "unauthorized";
    ConnectionStatus["DISCONNECTED"] = "disconnected";
})(ConnectionStatus = exports.ConnectionStatus || (exports.ConnectionStatus = {}));
var ActivityType;
(function (ActivityType) {
    /** when the user has stopped typing/recording */
    ActivityType["NONE"] = "none";
    /** when the user has focused the app */
    ActivityType["ONLINE"] = "online";
    /** when the user has unfocused the app */
    ActivityType["OFFLINE"] = "offline";
    ActivityType["TYPING"] = "typing";
    ActivityType["CUSTOM"] = "custom";
    ActivityType["RECORDING_VOICE"] = "recording_voice";
    ActivityType["RECORDING_VIDEO"] = "recording_video";
})(ActivityType = exports.ActivityType || (exports.ActivityType = {}));
var MessageBehavior;
(function (MessageBehavior) {
    /** keep the thread read, don't move the thread to the top of the list, don't show a notification */
    MessageBehavior["SILENT"] = "silent";
    /** keep the thread read, don't show a notification */
    MessageBehavior["KEEP_READ"] = "keep_read";
    /** don't show a notification */
    MessageBehavior["DONT_NOTIFY"] = "dont_notify";
})(MessageBehavior = exports.MessageBehavior || (exports.MessageBehavior = {}));
var PlayStatus;
(function (PlayStatus) {
    PlayStatus["UNPLAYED"] = "UNPLAYED";
    PlayStatus["PLAYED"] = "PLAYED";
})(PlayStatus = exports.PlayStatus || (exports.PlayStatus = {}));
var AppState;
(function (AppState) {
    /** Host is about to sleep (desktop) or suspend to memory (iOS) */
    AppState["SUSPENDING"] = "suspending";
    /** Host is waking or foregrounded */
    AppState["RESUMING"] = "resuming";
})(AppState = exports.AppState || (exports.AppState = {}));
